import math
import json
import os



class CalculadoraTanque:
    def __init__(self,altura_inicial,volumen_bruto_recibido,tanque):
        self.altura_inicial=altura_inicial
        self.volumen_bruto_recibido=volumen_bruto_recibido
        self.tanque=tanque
        
    def separar_decimal(self,numero):
        entero = int(numero)
        decimal = round(numero - entero, 2)  # Redondeamos para evitar problemas de precisi√≥n
        decimal_str = str(decimal).split('.')[1]  # Obtenemos la parte decimal como string
        return entero, int(decimal_str)  # Convertimos la parte decimal a entero
    

    def get_volumen_ctg(self, diccionario,clave ):
       clave = int(clave)  # Aseguramos que la clave sea un entero
       return diccionario.get(str(clave))
        

    def get_volumen_smr(self, diccionario, n):
        
        # Definir listas de incremento para diferentes tanques
        increase_101 = {
    1: 0.55, 2: 0.67, 3: 0.81, 4: 0.95, 5: 1.11, 6: 1.26, 7: 1.43,
    8: 1.60, 9: 1.77, 10: 1.96, 11: 2.14, 12: 2.32,
    13: 2.48, 14: 2.62, 15: 2.75, 16: 2.87, 17: 2.98, 18: 3.10,
    19: 3.20, 20: 3.30, 21: 3.40, 22: 3.49, 23: 3.58, 24: 3.67,
    25: 3.75, 26: 3.83, 27: 3.91, 28: 3.99, 29: 4.06, 30: 4.14,
    31: 4.20, 32: 4.28, 33: 4.34, 34: 4.41, 35: 4.48, 36: 4.53,
    37: 4.60, 38: 4.66, 39: 4.72, 40: 4.78, 41: 4.83, 42: 4.89,
    43: 4.94, 44: 5.00, 45: 5.05, 46: 5.10, 47: 5.16, 48: 5.21,
    49: 5.26, 50: 5.31, 51: 5.35, 52: 5.40, 53: 5.44, 54: 5.48,
    55: 5.53, 56: 5.57, 57: 5.61, 58: 5.65, 59: 5.70, 60: 5.73,
    61: 5.77, 62: 5.81, 63: 5.84, 64: 5.89, 65: 5.92, 66: 5.96,
    67: 5.99, 68: 6.02, 69: 6.06, 70: 6.09, 71: 6.13, 72: 6.16,
    73: 6.18, 74: 6.22, 75: 6.25, 76: 6.28, 77: 6.31, 78: 6.33,
    79: 6.37, 80: 6.39, 81: 6.42, 82: 6.45, 83: 6.47, 84: 6.50,
    85: 6.52, 86: 6.55, 87: 6.57, 88: 6.59, 89: 6.62, 90: 6.63,
    91: 6.66, 92: 6.68, 93: 6.70, 94: 6.72, 95: 6.74, 96: 6.76,
    97: 6.78, 98: 6.80, 99: 6.82, 100: 6.83, 101: 6.85, 102: 6.86,
    103: 6.89, 104: 6.90, 105: 6.91, 106: 6.93, 107: 6.94, 108: 6.96,
    109: 6.97, 110: 6.98, 111: 7.00, 112: 7.00, 113: 7.03, 114: 7.03,
    115: 7.04, 116: 7.06, 117: 7.06, 118: 7.08, 119: 7.08, 120: 7.10,
    121: 7.11, 122: 7.11, 123: 7.12, 124: 7.12, 125: 7.14, 126: 7.14,
    127: 7.14, 128: 7.16, 129: 7.15, 130: 7.17, 131: 7.17, 132: 7.17,
    133: 7.18, 134: 7.17, 135: 7.19, 136: 7.18, 137: 7.19, 138: 7.19,
    139: 7.18, 140: 7.20, 141: 7.19, 142: 7.19, 143: 7.20, 144: 7.19,
    145: 7.19, 146: 7.19, 147: 7.19, 148: 7.19, 149: 7.18, 150: 7.18,
    151: 7.17, 152: 7.18, 153: 7.17, 154: 7.16, 155: 7.16, 156: 7.15,
    157: 7.15, 158: 7.14, 159: 7.14, 160: 7.13, 161: 7.12, 162: 7.12,
    163: 7.10, 164: 7.10, 165: 7.09, 166: 7.08, 167: 7.07, 168: 7.06,
    169: 7.05, 170: 7.04, 171: 7.02, 172: 7.02, 173: 7.00, 174: 6.99,
    175: 6.98, 176: 6.96, 177: 6.95, 178: 6.93, 179: 6.93, 180: 6.91,
    181: 6.89, 182: 6.88, 183: 6.85, 184: 6.84, 185: 6.82, 186: 6.81,
    187: 6.79, 188: 6.76, 189: 6.75, 190: 6.73, 191: 6.71, 192: 6.69,
    193: 6.66, 194: 6.65, 195: 6.62, 196: 6.60, 197: 6.58, 198: 6.55,
    199: 6.53, 200: 6.50, 201: 6.48, 202: 6.46, 203: 6.43, 204: 6.41,
    205: 6.37, 206: 6.35, 207: 6.32, 208: 6.29, 209: 6.26, 210: 6.23,
    211: 6.20, 212: 6.17, 213: 6.14, 214: 6.11, 215: 6.07, 216: 6.04,
    217: 6.00, 218: 5.97, 219: 5.94, 220: 5.90, 221: 5.87, 222: 5.82,
    223: 5.79, 224: 5.75, 225: 5.71, 226: 5.67, 227: 5.62, 228: 5.59,
    229: 5.54, 230: 5.50, 231: 5.46, 232: 5.41, 233: 5.37, 234: 5.32,
    235: 5.27, 236: 5.23, 237: 5.17, 238: 5.13, 239: 5.07, 240: 5.02,
    241: 4.97, 242: 4.91, 243: 4.86, 244: 4.80, 245: 4.75, 246: 4.69,
    247: 4.62, 248: 4.57, 249: 4.50, 250: 4.44, 251: 4.37, 252: 4.30,
    253: 4.24, 254: 4.16, 255: 4.09, 256: 4.02, 257: 3.94, 258: 3.87,
    259: 3.78, 260: 3.70, 261: 3.61, 262: 3.53, 263: 3.44, 264: 3.34,
    265: 3.24, 266: 3.14, 267: 3.03, 268: 2.92, 269: 2.80, 270: 2.68,
    271: 2.54, 272: 2.39, 273: 2.22, 274: 2.03, 275: 1.84, 276: 1.66,
    277: 1.49, 278: 1.31, 278.5: 1.19
}


        increase_102 = {
    1: 0.55, 2: 0.68, 3: 0.82, 4: 0.97, 5: 1.13, 6: 1.30, 7: 1.47,
    8: 1.65, 9: 1.83, 10: 2.03, 11: 2.22, 12: 2.38,
    13: 2.53, 14: 2.66, 15: 2.79, 16: 2.91, 17: 3.02, 18: 3.13,
    19: 3.23, 20: 3.33, 21: 3.43, 22: 3.52, 23: 3.61, 24: 3.69,
    25: 3.78, 26: 3.85, 27: 3.94, 28: 4.01, 29: 4.08, 30: 4.16,
    31: 4.22, 32: 4.30, 33: 4.36, 34: 4.43, 35: 4.49, 36: 4.55,
    37: 4.62, 38: 4.67, 39: 4.74, 40: 4.79, 41: 4.85, 42: 4.91,
    43: 4.95, 44: 5.01, 45: 5.06, 46: 5.12, 47: 5.17, 48: 5.21,
    49: 5.27, 50: 5.31, 51: 5.36, 52: 5.41, 53: 5.44, 54: 5.50,
    55: 5.53, 56: 5.58, 57: 5.62, 58: 5.66, 59: 5.70, 60: 5.73,
    61: 5.78, 62: 5.81, 63: 5.85, 64: 5.89, 65: 5.92, 66: 5.96,
    67: 5.99, 68: 6.03, 69: 6.06, 70: 6.09, 71: 6.13, 72: 6.16,
    73: 6.19, 74: 6.22, 75: 6.25, 76: 6.28, 77: 6.30, 78: 6.34,
    79: 6.36, 80: 6.39, 81: 6.42, 82: 6.44, 83: 6.48, 84: 6.49,
    85: 6.52, 86: 6.55, 87: 6.56, 88: 6.60, 89: 6.61, 90: 6.64,
    91: 6.66, 92: 6.67, 93: 6.70, 94: 6.71, 95: 6.74, 96: 6.76,
    97: 6.77, 98: 6.80, 99: 6.81, 100: 6.84, 101: 6.84, 102: 6.86,
    103: 6.88, 104: 6.89, 105: 6.92, 106: 6.92, 107: 6.94, 108: 6.95,
    109: 6.96, 110: 6.99, 111: 6.99, 112: 7.01, 113: 7.02, 114: 7.03,
    115: 7.04, 116: 7.05, 117: 7.07, 118: 7.07, 119: 7.08, 120: 7.09,
    121: 7.09, 122: 7.11, 123: 7.11, 124: 7.12, 125: 7.13, 126: 7.13,
    127: 7.15, 128: 7.14, 129: 7.15, 130: 7.15, 131: 7.16, 132: 7.17,
    133: 7.16, 134: 7.18, 135: 7.17, 136: 7.18, 137: 7.18, 138: 7.18,
    139: 7.19, 140: 7.18, 141: 7.18, 142: 7.18, 143: 7.18, 144: 7.19,
    145: 7.18, 146: 7.18, 147: 7.18, 148: 7.17, 149: 7.18, 150: 7.17,
    151: 7.17, 152: 7.16, 153: 7.16, 154: 7.16, 155: 7.15, 156: 7.15,
    157: 7.14, 158: 7.13, 159: 7.13, 160: 7.12, 161: 7.12, 162: 7.10,
    163: 7.10, 164: 7.09, 165: 7.08, 166: 7.08, 167: 7.06, 168: 7.06,
    169: 7.04, 170: 7.03, 171: 7.02, 172: 7.00, 173: 7.00, 174: 6.98,
    175: 6.97, 176: 6.96, 177: 6.94, 178: 6.93, 179: 6.91, 180: 6.90,
    181: 6.88, 182: 6.86, 183: 6.85, 184: 6.83, 185: 6.82, 186: 6.79,
    187: 6.78, 188: 6.76, 189: 6.74, 190: 6.73, 191: 6.70, 192: 6.68,
    193: 6.66, 194: 6.63, 195: 6.62, 196: 6.59, 197: 6.57, 198: 6.55,
    199: 6.52, 200: 6.50, 201: 6.47, 202: 6.45, 203: 6.42, 204: 6.39,
    205: 6.37, 206: 6.34, 207: 6.32, 208: 6.28, 209: 6.25, 210: 6.23,
    211: 6.19, 212: 6.17, 213: 6.13, 214: 6.10, 215: 6.07, 216: 6.03,
    217: 6.00, 218: 5.96, 219: 5.93, 220: 5.89, 221: 5.85, 222: 5.82,
    223: 5.78, 224: 5.75, 225: 5.70, 226: 5.66, 227: 5.62, 228: 5.58,
    229: 5.54, 230: 5.49, 231: 5.45, 232: 5.41, 233: 5.36, 234: 5.32,
    235: 5.26, 236: 5.22, 237: 5.17, 238: 5.12, 239: 5.07, 240: 5.01,
    241: 4.97, 242: 4.91, 243: 4.85, 244: 4.80, 245: 4.74, 246: 4.69,
    247: 4.62, 248: 4.56, 249: 4.50, 250: 4.43, 251: 4.37, 252: 4.30,
    253: 4.23, 254: 4.16, 255: 4.09, 256: 4.02, 257: 3.94, 258: 3.86,
    259: 3.78, 260: 3.70, 261: 3.61, 262: 3.52, 263: 3.44, 264: 3.34,
    265: 3.24, 266: 3.14, 267: 3.03, 268: 2.92, 269: 2.80, 270: 2.68,
    271: 2.55, 272: 2.40, 273: 2.24, 274: 2.05, 275: 1.85, 276: 1.66,
    277: 1.48, 278: 1.30, 278.7: 1.16
}


        increase_103 = {
    1: 0.57, 2: 0.69, 3: 0.83, 4: 0.97, 5: 1.12, 6: 1.27, 7: 1.44, 
    8: 1.60, 9: 1.78, 10: 1.96, 11: 2.14, 12: 2.32, 13: 2.48, 14: 2.62, 
    15: 2.75, 16: 2.87, 17: 2.99, 18: 3.10, 19: 3.20, 20: 3.31, 
    21: 3.40, 22: 3.50, 23: 3.59, 24: 3.68, 25: 3.76, 26: 3.84, 
    27: 3.92, 28: 4.00, 29: 4.07, 30: 4.14, 31: 4.21, 32: 4.29, 
    33: 4.35, 34: 4.42, 35: 4.48, 36: 4.55, 37: 4.61, 38: 4.67, 
    39: 4.73, 40: 4.79, 41: 4.85, 42: 4.90, 43: 4.96, 44: 5.01, 
    45: 5.06, 46: 5.12, 47: 5.17, 48: 5.22, 49: 5.27, 50: 5.31, 
    51: 5.36, 52: 5.41, 53: 5.45, 54: 5.50, 55: 5.54, 56: 5.58, 
    57: 5.62, 58: 5.67, 59: 5.71, 60: 5.74, 61: 5.79, 62: 5.82, 
    63: 5.86, 64: 5.90, 65: 5.93, 66: 5.97, 67: 6.00, 68: 6.04, 
    69: 6.07, 70: 6.11, 71: 6.14, 72: 6.17, 73: 6.20, 74: 6.23, 
    75: 6.26, 76: 6.29, 77: 6.32, 78: 6.35, 79: 6.38, 80: 6.41, 
    81: 6.43, 82: 6.46, 83: 6.49, 84: 6.51, 85: 6.54, 86: 6.56, 
    87: 6.59, 88: 6.61, 89: 6.63, 90: 6.65, 91: 6.67, 92: 6.70, 
    93: 6.72, 94: 6.74, 95: 6.76, 96: 6.78, 97: 6.80, 98: 6.81, 
    99: 6.83, 100: 6.85, 101: 6.87, 102: 6.89, 103: 6.90, 104: 6.92, 
    105: 6.93, 106: 6.95, 107: 6.96, 108: 6.98, 109: 6.99, 110: 7.00, 
    111: 7.02, 112: 7.03, 113: 7.04, 114: 7.05, 115: 7.06, 116: 7.08, 
    117: 7.08, 118: 7.09, 119: 7.11, 120: 7.11, 121: 7.12, 122: 7.13, 
    123: 7.14, 124: 7.15, 125: 7.15, 126: 7.16, 127: 7.17, 128: 7.17, 
    129: 7.18, 130: 7.18, 131: 7.19, 132: 7.19, 133: 7.20, 134: 7.20, 
    135: 7.20, 136: 7.21, 137: 7.21, 138: 7.21, 139: 7.21, 140: 7.21, 
    141: 7.21, 142: 7.21, 143: 7.21, 144: 7.21, 145: 7.21, 146: 7.21, 
    147: 7.21, 148: 7.21, 149: 7.20, 150: 7.20, 151: 7.20, 152: 7.20, 
    153: 7.19, 154: 7.19, 155: 7.18, 156: 7.18, 157: 7.17, 158: 7.17, 
    159: 7.16, 160: 7.15, 161: 7.14, 162: 7.14, 163: 7.13, 164: 7.12, 
    165: 7.11, 166: 7.10, 167: 7.10, 168: 7.08, 169: 7.07, 170: 7.06, 
    171: 7.05, 172: 7.04, 173: 7.03, 174: 7.02, 175: 7.00, 176: 6.99, 
    177: 6.98, 178: 6.96, 179: 6.95, 180: 6.93, 181: 6.92, 182: 6.90, 
    183: 6.88, 184: 6.87, 185: 6.85, 186: 6.83, 187: 6.81, 188: 6.80, 
    189: 6.78, 190: 6.76, 191: 6.74, 192: 6.72, 193: 6.70, 194: 6.67, 
    195: 6.65, 196: 6.63, 197: 6.61, 198: 6.58, 199: 6.56, 200: 6.54, 
    201: 6.51, 202: 6.48, 203: 6.46, 204: 6.43, 205: 6.41, 206: 6.38, 
    207: 6.35, 208: 6.32, 209: 6.29, 210: 6.26, 211: 6.23, 212: 6.20, 
    213: 6.17, 214: 6.14, 215: 6.11, 216: 6.07, 217: 6.04, 218: 6.00, 
    219: 5.97, 220: 5.93, 221: 5.90, 222: 5.86, 223: 5.82, 224: 5.78, 
    225: 5.74, 226: 5.70, 227: 5.66, 228: 5.62, 229: 5.58, 230: 5.54, 
    231: 5.49, 232: 5.45, 233: 5.40, 234: 5.36, 235: 5.31, 236: 5.26, 
    237: 5.21, 238: 5.16, 239: 5.11, 240: 5.06, 241: 5.01, 242: 4.95, 
    243: 4.90, 244: 4.84, 245: 4.79, 246: 4.73, 247: 4.67, 248: 4.61, 
    249: 4.55, 250: 4.48, 251: 4.42, 252: 4.35, 253: 4.28, 254: 4.21, 
    255: 4.14, 256: 4.07, 257: 3.99, 258: 3.91, 259: 3.83, 260: 3.75, 
    261: 3.67, 262: 3.58, 263: 3.49, 264: 3.40, 265: 3.30, 266: 3.20, 
    267: 3.09, 268: 2.99, 269: 2.87, 270: 2.75, 271: 2.62, 272: 2.47, 
    273: 2.32, 274: 2.13, 275: 1.94, 276: 1.76, 277: 1.58, 278: 1.41, 
    279: 1.25, 279.1: 1.17
}

        increase_104= {
    1: 0.06, 2: 0.11, 3: 0.14, 4: 0.17, 5: 0.19, 6: 0.21, 7: 0.23, 8: 0.25, 9: 0.26, 10: 0.28,
    11: 0.29, 12: 0.31, 13: 0.32, 14: 0.33, 15: 0.34, 16: 0.35, 17: 0.36, 18: 0.38, 19: 0.39, 20: 0.40,
    21: 0.41, 22: 0.41, 23: 0.42, 24: 0.43, 25: 0.44, 26: 0.44, 27: 0.45, 28: 0.46, 29: 0.46, 30: 0.47,
    31: 0.47, 32: 0.48, 33: 0.49, 34: 0.49, 35: 0.50, 36: 0.50, 37: 0.51, 38: 0.51, 39: 0.52, 40: 0.52,
    41: 0.53, 42: 0.53, 43: 0.53, 44: 0.54, 45: 0.54, 46: 0.54, 47: 0.55, 48: 0.55, 49: 0.55, 50: 0.56,
    51: 0.56, 52: 0.56, 53: 0.57, 54: 0.57, 55: 0.57, 56: 0.57, 57: 0.58, 58: 0.58, 59: 0.58, 60: 0.58,
    61: 0.58, 62: 0.58, 63: 0.58, 64: 0.58, 65: 0.58, 66: 0.58, 67: 0.59, 68: 0.59, 69: 0.59, 70: 0.59,
    71: 0.59, 72: 0.59, 73: 0.59, 74: 0.59, 75: 0.59, 76: 0.58, 77: 0.58, 78: 0.58, 79: 0.58, 80: 0.58,
    81: 0.58, 82: 0.58, 83: 0.58, 84: 0.58, 85: 0.57, 86: 0.57, 87: 0.57, 88: 0.57, 89: 0.56, 90: 0.56,
    91: 0.56, 92: 0.56, 93: 0.55, 94: 0.55, 95: 0.55, 96: 0.54, 97: 0.54, 98: 0.54, 99: 0.53, 100: 0.53,
    101: 0.53, 102: 0.52, 103: 0.52, 104: 0.51, 105: 0.51, 106: 0.50, 107: 0.50, 108: 0.49, 109: 0.49,
    110: 0.48, 111: 0.47, 112: 0.47, 113: 0.46, 114: 0.45, 115: 0.45, 116: 0.44, 117: 0.43, 118: 0.43,
    119: 0.42, 120: 0.41, 121: 0.40, 122: 0.39, 123: 0.38, 124: 0.37, 125: 0.36, 126: 0.35, 127: 0.34,
    128: 0.33, 129: 0.32, 130: 0.31, 131: 0.29, 132: 0.28, 133: 0.26, 134: 0.25, 135: 0.23, 136: 0.21,
    137: 0.19, 138: 0.17, 139: 0.14, 140: 0.11, 140.9: 0.06
}




        # Verificar si n est√° en el diccionario
        if str(n) in diccionario:
            return diccionario[str(n)]
        
        # Obtener parte entera y decimal
        parte_entera, parte_decimal = self.separar_decimal(n)
        # Obtener el valor base
        val_1 = diccionario.get(str(parte_entera))

        # Inicializar val_2
        val_2 = 0

        # Determinar qu√© incremento aplicar basado en el tanque
        if "tk_101" in diccionario:
            val_2 = increase_101.get(parte_entera+1)*parte_decimal
        elif "tk_102" in diccionario:
            val_2 = increase_102.get(parte_entera+1)*parte_decimal
        elif "tk_103" in diccionario:
            val_2 = increase_103.get(parte_entera+1)*parte_decimal
        elif "tk_104" in diccionario:
            val_2 = increase_104.get(parte_entera+1)*parte_decimal   
            print(increase_104[parte_entera+1]) 
        # Si n es un entero, retornar solo el valor base
        if parte_decimal == 0:
            return round(val_1, 2) 
        # Retornar la suma sin redondear hasta el final
        return round((val_1 + val_2), 2)

   
    